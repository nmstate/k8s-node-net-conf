// Code generated by github.com/varlink/go/cmd/varlink-go-interface-generator, DO NOT EDIT.

// # Copyright (c) 2020 Red Hat, Inc.
// # This file is part of nmstate
// # This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 2.1 of the License, or
// (at your option) any later version.
// # This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// # You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//
// Interface definition
package ionmstate

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/varlink/go/varlink"
)

// Generated type declarations

// Types definition
type Logs struct {
	Time    string `json:"time"`
	Level   string `json:"level"`
	Message string `json:"message"`
}

// Errors definition
type NmstateValueError struct {
	Error_message string `json:"error_message"`
	Log           []Logs `json:"log"`
}

func (e NmstateValueError) Error() string {
	s := "io.nmstate.NmstateValueError"
	s += fmt.Sprintf("(Error_message: %v, Log: %v)", e.Error_message, e.Log)
	return s
}

type NmstatePermissionError struct {
	Error_message string `json:"error_message"`
	Log           []Logs `json:"log"`
}

func (e NmstatePermissionError) Error() string {
	s := "io.nmstate.NmstatePermissionError"
	s += fmt.Sprintf("(Error_message: %v, Log: %v)", e.Error_message, e.Log)
	return s
}

type NmstateConflictError struct {
	Error_message string `json:"error_message"`
	Log           []Logs `json:"log"`
}

func (e NmstateConflictError) Error() string {
	s := "io.nmstate.NmstateConflictError"
	s += fmt.Sprintf("(Error_message: %v, Log: %v)", e.Error_message, e.Log)
	return s
}

type NmstateError struct {
	Error_message string `json:"error_message"`
	Log           []Logs `json:"log"`
}

func (e NmstateError) Error() string {
	s := "io.nmstate.NmstateError"
	s += fmt.Sprintf("(Error_message: %v, Log: %v)", e.Error_message, e.Log)
	return s
}

type NmstateLibnmError struct {
	Error_message string `json:"error_message"`
	Log           []Logs `json:"log"`
}

func (e NmstateLibnmError) Error() string {
	s := "io.nmstate.NmstateLibnmError"
	s += fmt.Sprintf("(Error_message: %v, Log: %v)", e.Error_message, e.Log)
	return s
}

type NmstateVerificationError struct {
	Error_message string `json:"error_message"`
	Log           []Logs `json:"log"`
}

func (e NmstateVerificationError) Error() string {
	s := "io.nmstate.NmstateVerificationError"
	s += fmt.Sprintf("(Error_message: %v, Log: %v)", e.Error_message, e.Log)
	return s
}

type NmstateNotImplementedError struct {
	Error_message string `json:"error_message"`
	Log           []Logs `json:"log"`
}

func (e NmstateNotImplementedError) Error() string {
	s := "io.nmstate.NmstateNotImplementedError"
	s += fmt.Sprintf("(Error_message: %v, Log: %v)", e.Error_message, e.Log)
	return s
}

type NmstateInternalError struct {
	Error_message string `json:"error_message"`
	Log           []Logs `json:"log"`
}

func (e NmstateInternalError) Error() string {
	s := "io.nmstate.NmstateInternalError"
	s += fmt.Sprintf("(Error_message: %v, Log: %v)", e.Error_message, e.Log)
	return s
}

type NmstateDependencyError struct {
	Error_message string `json:"error_message"`
	Log           []Logs `json:"log"`
}

func (e NmstateDependencyError) Error() string {
	s := "io.nmstate.NmstateDependencyError"
	s += fmt.Sprintf("(Error_message: %v, Log: %v)", e.Error_message, e.Log)
	return s
}

func Dispatch_Error(err error) error {
	if e, ok := err.(*varlink.Error); ok {
		switch e.Name {
		case "io.nmstate.NmstateValueError":
			errorRawParameters := e.Parameters.(*json.RawMessage)
			if errorRawParameters == nil {
				return e
			}
			var param NmstateValueError
			err := json.Unmarshal(*errorRawParameters, &param)
			if err != nil {
				return e
			}
			return &param
		case "io.nmstate.NmstatePermissionError":
			errorRawParameters := e.Parameters.(*json.RawMessage)
			if errorRawParameters == nil {
				return e
			}
			var param NmstatePermissionError
			err := json.Unmarshal(*errorRawParameters, &param)
			if err != nil {
				return e
			}
			return &param
		case "io.nmstate.NmstateConflictError":
			errorRawParameters := e.Parameters.(*json.RawMessage)
			if errorRawParameters == nil {
				return e
			}
			var param NmstateConflictError
			err := json.Unmarshal(*errorRawParameters, &param)
			if err != nil {
				return e
			}
			return &param
		case "io.nmstate.NmstateError":
			errorRawParameters := e.Parameters.(*json.RawMessage)
			if errorRawParameters == nil {
				return e
			}
			var param NmstateError
			err := json.Unmarshal(*errorRawParameters, &param)
			if err != nil {
				return e
			}
			return &param
		case "io.nmstate.NmstateLibnmError":
			errorRawParameters := e.Parameters.(*json.RawMessage)
			if errorRawParameters == nil {
				return e
			}
			var param NmstateLibnmError
			err := json.Unmarshal(*errorRawParameters, &param)
			if err != nil {
				return e
			}
			return &param
		case "io.nmstate.NmstateVerificationError":
			errorRawParameters := e.Parameters.(*json.RawMessage)
			if errorRawParameters == nil {
				return e
			}
			var param NmstateVerificationError
			err := json.Unmarshal(*errorRawParameters, &param)
			if err != nil {
				return e
			}
			return &param
		case "io.nmstate.NmstateNotImplementedError":
			errorRawParameters := e.Parameters.(*json.RawMessage)
			if errorRawParameters == nil {
				return e
			}
			var param NmstateNotImplementedError
			err := json.Unmarshal(*errorRawParameters, &param)
			if err != nil {
				return e
			}
			return &param
		case "io.nmstate.NmstateInternalError":
			errorRawParameters := e.Parameters.(*json.RawMessage)
			if errorRawParameters == nil {
				return e
			}
			var param NmstateInternalError
			err := json.Unmarshal(*errorRawParameters, &param)
			if err != nil {
				return e
			}
			return &param
		case "io.nmstate.NmstateDependencyError":
			errorRawParameters := e.Parameters.(*json.RawMessage)
			if errorRawParameters == nil {
				return e
			}
			var param NmstateDependencyError
			err := json.Unmarshal(*errorRawParameters, &param)
			if err != nil {
				return e
			}
			return &param
		}
	}
	return err
}

// Generated client method calls

// Method definition
type Show_methods struct{}

func Show() Show_methods { return Show_methods{} }

func (m Show_methods) Call(ctx context.Context, c *varlink.Connection, arguments_in_ map[string]json.RawMessage) (state_out_ *json.RawMessage, log_out_ []Logs, err_ error) {
	receive, err_ := m.Send(ctx, c, 0, arguments_in_)
	if err_ != nil {
		return
	}
	state_out_, log_out_, _, err_ = receive(ctx)
	return
}

func (m Show_methods) Send(ctx context.Context, c *varlink.Connection, flags uint64, arguments_in_ map[string]json.RawMessage) (func(ctx context.Context) (*json.RawMessage, []Logs, uint64, error), error) {
	var in struct {
		Arguments map[string]json.RawMessage `json:"arguments"`
	}
	in.Arguments = map[string]json.RawMessage(arguments_in_)
	receive, err := c.Send(ctx, "io.nmstate.Show", in, flags)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (state_out_ *json.RawMessage, log_out_ []Logs, flags uint64, err error) {
		var out struct {
			State *json.RawMessage `json:"state,omitempty"`
			Log   []Logs           `json:"log"`
		}
		flags, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		state_out_ = out.State
		log_out_ = []Logs(out.Log)
		return
	}, nil
}

func (m Show_methods) Upgrade(ctx context.Context, c *varlink.Connection, arguments_in_ map[string]json.RawMessage) (func(ctx context.Context) (state_out_ *json.RawMessage, log_out_ []Logs, flags uint64, conn varlink.ReadWriterContext, err_ error), error) {
	var in struct {
		Arguments map[string]json.RawMessage `json:"arguments"`
	}
	in.Arguments = map[string]json.RawMessage(arguments_in_)
	receive, err := c.Upgrade(ctx, "io.nmstate.Show", in)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (state_out_ *json.RawMessage, log_out_ []Logs, flags uint64, conn varlink.ReadWriterContext, err error) {
		var out struct {
			State *json.RawMessage `json:"state,omitempty"`
			Log   []Logs           `json:"log"`
		}
		flags, conn, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		state_out_ = out.State
		log_out_ = []Logs(out.Log)
		return
	}, nil
}

type Apply_methods struct{}

func Apply() Apply_methods { return Apply_methods{} }

func (m Apply_methods) Call(ctx context.Context, c *varlink.Connection, arguments_in_ map[string]json.RawMessage) (log_out_ []Logs, err_ error) {
	receive, err_ := m.Send(ctx, c, 0, arguments_in_)
	if err_ != nil {
		return
	}
	log_out_, _, err_ = receive(ctx)
	return
}

func (m Apply_methods) Send(ctx context.Context, c *varlink.Connection, flags uint64, arguments_in_ map[string]json.RawMessage) (func(ctx context.Context) ([]Logs, uint64, error), error) {
	var in struct {
		Arguments map[string]json.RawMessage `json:"arguments"`
	}
	in.Arguments = map[string]json.RawMessage(arguments_in_)
	receive, err := c.Send(ctx, "io.nmstate.Apply", in, flags)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (log_out_ []Logs, flags uint64, err error) {
		var out struct {
			Log []Logs `json:"log"`
		}
		flags, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		log_out_ = []Logs(out.Log)
		return
	}, nil
}

func (m Apply_methods) Upgrade(ctx context.Context, c *varlink.Connection, arguments_in_ map[string]json.RawMessage) (func(ctx context.Context) (log_out_ []Logs, flags uint64, conn varlink.ReadWriterContext, err_ error), error) {
	var in struct {
		Arguments map[string]json.RawMessage `json:"arguments"`
	}
	in.Arguments = map[string]json.RawMessage(arguments_in_)
	receive, err := c.Upgrade(ctx, "io.nmstate.Apply", in)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (log_out_ []Logs, flags uint64, conn varlink.ReadWriterContext, err error) {
		var out struct {
			Log []Logs `json:"log"`
		}
		flags, conn, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		log_out_ = []Logs(out.Log)
		return
	}, nil
}

type Commit_methods struct{}

func Commit() Commit_methods { return Commit_methods{} }

func (m Commit_methods) Call(ctx context.Context, c *varlink.Connection, arguments_in_ map[string]json.RawMessage) (log_out_ []Logs, err_ error) {
	receive, err_ := m.Send(ctx, c, 0, arguments_in_)
	if err_ != nil {
		return
	}
	log_out_, _, err_ = receive(ctx)
	return
}

func (m Commit_methods) Send(ctx context.Context, c *varlink.Connection, flags uint64, arguments_in_ map[string]json.RawMessage) (func(ctx context.Context) ([]Logs, uint64, error), error) {
	var in struct {
		Arguments map[string]json.RawMessage `json:"arguments"`
	}
	in.Arguments = map[string]json.RawMessage(arguments_in_)
	receive, err := c.Send(ctx, "io.nmstate.Commit", in, flags)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (log_out_ []Logs, flags uint64, err error) {
		var out struct {
			Log []Logs `json:"log"`
		}
		flags, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		log_out_ = []Logs(out.Log)
		return
	}, nil
}

func (m Commit_methods) Upgrade(ctx context.Context, c *varlink.Connection, arguments_in_ map[string]json.RawMessage) (func(ctx context.Context) (log_out_ []Logs, flags uint64, conn varlink.ReadWriterContext, err_ error), error) {
	var in struct {
		Arguments map[string]json.RawMessage `json:"arguments"`
	}
	in.Arguments = map[string]json.RawMessage(arguments_in_)
	receive, err := c.Upgrade(ctx, "io.nmstate.Commit", in)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (log_out_ []Logs, flags uint64, conn varlink.ReadWriterContext, err error) {
		var out struct {
			Log []Logs `json:"log"`
		}
		flags, conn, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		log_out_ = []Logs(out.Log)
		return
	}, nil
}

type Rollback_methods struct{}

func Rollback() Rollback_methods { return Rollback_methods{} }

func (m Rollback_methods) Call(ctx context.Context, c *varlink.Connection, arguments_in_ map[string]json.RawMessage) (log_out_ []Logs, err_ error) {
	receive, err_ := m.Send(ctx, c, 0, arguments_in_)
	if err_ != nil {
		return
	}
	log_out_, _, err_ = receive(ctx)
	return
}

func (m Rollback_methods) Send(ctx context.Context, c *varlink.Connection, flags uint64, arguments_in_ map[string]json.RawMessage) (func(ctx context.Context) ([]Logs, uint64, error), error) {
	var in struct {
		Arguments map[string]json.RawMessage `json:"arguments"`
	}
	in.Arguments = map[string]json.RawMessage(arguments_in_)
	receive, err := c.Send(ctx, "io.nmstate.Rollback", in, flags)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (log_out_ []Logs, flags uint64, err error) {
		var out struct {
			Log []Logs `json:"log"`
		}
		flags, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		log_out_ = []Logs(out.Log)
		return
	}, nil
}

func (m Rollback_methods) Upgrade(ctx context.Context, c *varlink.Connection, arguments_in_ map[string]json.RawMessage) (func(ctx context.Context) (log_out_ []Logs, flags uint64, conn varlink.ReadWriterContext, err_ error), error) {
	var in struct {
		Arguments map[string]json.RawMessage `json:"arguments"`
	}
	in.Arguments = map[string]json.RawMessage(arguments_in_)
	receive, err := c.Upgrade(ctx, "io.nmstate.Rollback", in)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (log_out_ []Logs, flags uint64, conn varlink.ReadWriterContext, err error) {
		var out struct {
			Log []Logs `json:"log"`
		}
		flags, conn, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		log_out_ = []Logs(out.Log)
		return
	}, nil
}

// Generated service interface with all methods

type ionmstateInterface interface {
	Show(ctx context.Context, c VarlinkCall, arguments_ map[string]json.RawMessage) error
	Apply(ctx context.Context, c VarlinkCall, arguments_ map[string]json.RawMessage) error
	Commit(ctx context.Context, c VarlinkCall, arguments_ map[string]json.RawMessage) error
	Rollback(ctx context.Context, c VarlinkCall, arguments_ map[string]json.RawMessage) error
}

// Generated service object with all methods

type VarlinkCall struct{ varlink.Call }

// Generated reply methods for all varlink errors

// Errors definition
func (c *VarlinkCall) ReplyNmstateValueError(ctx context.Context, error_message_ string, log_ []Logs) error {
	var out NmstateValueError
	out.Error_message = error_message_
	out.Log = []Logs(log_)
	return c.ReplyError(ctx, "io.nmstate.NmstateValueError", &out)
}

func (c *VarlinkCall) ReplyNmstatePermissionError(ctx context.Context, error_message_ string, log_ []Logs) error {
	var out NmstatePermissionError
	out.Error_message = error_message_
	out.Log = []Logs(log_)
	return c.ReplyError(ctx, "io.nmstate.NmstatePermissionError", &out)
}

func (c *VarlinkCall) ReplyNmstateConflictError(ctx context.Context, error_message_ string, log_ []Logs) error {
	var out NmstateConflictError
	out.Error_message = error_message_
	out.Log = []Logs(log_)
	return c.ReplyError(ctx, "io.nmstate.NmstateConflictError", &out)
}

func (c *VarlinkCall) ReplyNmstateError(ctx context.Context, error_message_ string, log_ []Logs) error {
	var out NmstateError
	out.Error_message = error_message_
	out.Log = []Logs(log_)
	return c.ReplyError(ctx, "io.nmstate.NmstateError", &out)
}

func (c *VarlinkCall) ReplyNmstateLibnmError(ctx context.Context, error_message_ string, log_ []Logs) error {
	var out NmstateLibnmError
	out.Error_message = error_message_
	out.Log = []Logs(log_)
	return c.ReplyError(ctx, "io.nmstate.NmstateLibnmError", &out)
}

func (c *VarlinkCall) ReplyNmstateVerificationError(ctx context.Context, error_message_ string, log_ []Logs) error {
	var out NmstateVerificationError
	out.Error_message = error_message_
	out.Log = []Logs(log_)
	return c.ReplyError(ctx, "io.nmstate.NmstateVerificationError", &out)
}

func (c *VarlinkCall) ReplyNmstateNotImplementedError(ctx context.Context, error_message_ string, log_ []Logs) error {
	var out NmstateNotImplementedError
	out.Error_message = error_message_
	out.Log = []Logs(log_)
	return c.ReplyError(ctx, "io.nmstate.NmstateNotImplementedError", &out)
}

func (c *VarlinkCall) ReplyNmstateInternalError(ctx context.Context, error_message_ string, log_ []Logs) error {
	var out NmstateInternalError
	out.Error_message = error_message_
	out.Log = []Logs(log_)
	return c.ReplyError(ctx, "io.nmstate.NmstateInternalError", &out)
}

func (c *VarlinkCall) ReplyNmstateDependencyError(ctx context.Context, error_message_ string, log_ []Logs) error {
	var out NmstateDependencyError
	out.Error_message = error_message_
	out.Log = []Logs(log_)
	return c.ReplyError(ctx, "io.nmstate.NmstateDependencyError", &out)
}

// Generated reply methods for all varlink methods

func (c *VarlinkCall) ReplyShow(ctx context.Context, state_ *json.RawMessage, log_ []Logs) error {
	var out struct {
		State *json.RawMessage `json:"state,omitempty"`
		Log   []Logs           `json:"log"`
	}
	out.State = state_
	out.Log = []Logs(log_)
	return c.Reply(ctx, &out)
}

func (c *VarlinkCall) ReplyApply(ctx context.Context, log_ []Logs) error {
	var out struct {
		Log []Logs `json:"log"`
	}
	out.Log = []Logs(log_)
	return c.Reply(ctx, &out)
}

func (c *VarlinkCall) ReplyCommit(ctx context.Context, log_ []Logs) error {
	var out struct {
		Log []Logs `json:"log"`
	}
	out.Log = []Logs(log_)
	return c.Reply(ctx, &out)
}

func (c *VarlinkCall) ReplyRollback(ctx context.Context, log_ []Logs) error {
	var out struct {
		Log []Logs `json:"log"`
	}
	out.Log = []Logs(log_)
	return c.Reply(ctx, &out)
}

// Generated dummy implementations for all varlink methods

// Method definition
func (s *VarlinkInterface) Show(ctx context.Context, c VarlinkCall, arguments_ map[string]json.RawMessage) error {
	return c.ReplyMethodNotImplemented(ctx, "io.nmstate.Show")
}

func (s *VarlinkInterface) Apply(ctx context.Context, c VarlinkCall, arguments_ map[string]json.RawMessage) error {
	return c.ReplyMethodNotImplemented(ctx, "io.nmstate.Apply")
}

func (s *VarlinkInterface) Commit(ctx context.Context, c VarlinkCall, arguments_ map[string]json.RawMessage) error {
	return c.ReplyMethodNotImplemented(ctx, "io.nmstate.Commit")
}

func (s *VarlinkInterface) Rollback(ctx context.Context, c VarlinkCall, arguments_ map[string]json.RawMessage) error {
	return c.ReplyMethodNotImplemented(ctx, "io.nmstate.Rollback")
}

// Generated method call dispatcher

func (s *VarlinkInterface) VarlinkDispatch(ctx context.Context, call varlink.Call, methodname string) error {
	switch methodname {
	case "Show":
		var in struct {
			Arguments map[string]json.RawMessage `json:"arguments"`
		}
		err := call.GetParameters(&in)
		if err != nil {
			return call.ReplyInvalidParameter(ctx, "parameters")
		}
		return s.ionmstateInterface.Show(ctx, VarlinkCall{call}, map[string]json.RawMessage(in.Arguments))

	case "Apply":
		var in struct {
			Arguments map[string]json.RawMessage `json:"arguments"`
		}
		err := call.GetParameters(&in)
		if err != nil {
			return call.ReplyInvalidParameter(ctx, "parameters")
		}
		return s.ionmstateInterface.Apply(ctx, VarlinkCall{call}, map[string]json.RawMessage(in.Arguments))

	case "Commit":
		var in struct {
			Arguments map[string]json.RawMessage `json:"arguments"`
		}
		err := call.GetParameters(&in)
		if err != nil {
			return call.ReplyInvalidParameter(ctx, "parameters")
		}
		return s.ionmstateInterface.Commit(ctx, VarlinkCall{call}, map[string]json.RawMessage(in.Arguments))

	case "Rollback":
		var in struct {
			Arguments map[string]json.RawMessage `json:"arguments"`
		}
		err := call.GetParameters(&in)
		if err != nil {
			return call.ReplyInvalidParameter(ctx, "parameters")
		}
		return s.ionmstateInterface.Rollback(ctx, VarlinkCall{call}, map[string]json.RawMessage(in.Arguments))

	default:
		return call.ReplyMethodNotFound(ctx, methodname)
	}
}

// Generated varlink interface name

func (s *VarlinkInterface) VarlinkGetName() string {
	return `io.nmstate`
}

// Generated varlink interface description

func (s *VarlinkInterface) VarlinkGetDescription() string {
	return `#
# Copyright (c) 2020 Red Hat, Inc.
#
# This file is part of nmstate
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2.1 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# Interface definition
interface io.nmstate

# Types definition
type Logs (
    time: string,
    level: string,
    message: string
)

# Method definition
method Show(arguments: [string]object) -> (
    state: ?object,
    log: []Logs
)

method Apply(arguments: [string]object) -> (
    log: []Logs
)

method Commit(arguments: [string]object) -> (
    log: []Logs
)

method Rollback(arguments: [string]object) -> (
    log: []Logs
)

# Errors definition
error NmstateValueError (
    error_message: string,
    log: []Logs
)

error NmstatePermissionError (
    error_message: string,
    log: []Logs
)

error NmstateConflictError (
    error_message: string,
    log: []Logs
)

error NmstateError (
    error_message: string,
    log: []Logs
)

error NmstateLibnmError (
    error_message: string,
    log: []Logs
)

error NmstateVerificationError (
    error_message: string,
    log: []Logs
)

error NmstateNotImplementedError (
    error_message: string,
    log: []Logs
)

error NmstateInternalError (
    error_message: string,
    log: []Logs
)

error NmstateDependencyError (
    error_message: string,
    log: []Logs
)
`
}

// Generated service interface

type VarlinkInterface struct {
	ionmstateInterface
}

func VarlinkNew(m ionmstateInterface) *VarlinkInterface {
	return &VarlinkInterface{m}
}
